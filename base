#include <iostream>
#include <fstream>
#include <vector>
#include <map>
#include <iomanip>
#include <string>


// Класс для записи трат и прихода денег
class AccountManager {
public:
    void recordExpense(double amount, const std::string& category) {
        std::ofstream file("expenses.txt", std::ios::app);
        file << amount << "," << category << std::endl;
        file.close();
    }

    void recordIncome(double amount) {
        std::ofstream file("income.txt", std::ios::app);
        file << amount << std::endl;
        file.close();
    }
};

// Класс для расчета баланса и процентов трат
class ExpenseAnalyzer {
public:
    void calculateBalance() {
        double totalExpenses = 0;
        double totalIncome = 0;

        std::ifstream expenseFile("expenses.txt");
        double amount;
        std::string category;
        while (expenseFile >> amount >> std::ws && std::getline(expenseFile, category)) {
            totalExpenses += amount;
            categoryExpenses[category] += amount;
        }
        expenseFile.close();

        std::ifstream incomeFile("income.txt");
        while (incomeFile >> amount) {
            totalIncome += amount;
        }
        incomeFile.close();

        double balance = totalIncome - totalExpenses;
        std::cout << "Balance: " << balance << std::endl;
    }

    void calculateCategoryPercentagesLastMonth() {
        std::map<std::string, double> categoryPercentages;
        double totalExpenses = 0;

        std::ifstream expenseFile("expenses.txt");
        double amount;
        std::string category;
        while (expenseFile >> amount >> std::ws && std::getline(expenseFile, category)) {
            totalExpenses += amount;
            if (categoryExpenses.find(category) != categoryExpenses.end()) {
                categoryPercentages[category] += amount;
            }
        }
        expenseFile.close();

        std::cout << "Category Percentages Last Month:" << std::endl;
        for (const auto& pair : categoryPercentages) {
            double percentage = (pair.second / totalExpenses) * 100;
            std::cout << pair.first << ": " << std::fixed << std::setprecision(2) << percentage << "%" << std::endl;
        }
    }

    void calculateCategoryPercentagesAllTime() {
        std::map<std::string, double> categoryPercentages;
        double totalExpenses = 0;

        std::ifstream expenseFile("expenses.txt");
        double amount;
        std::string category;
        while (expenseFile >> amount >> std::ws && std::getline(expenseFile, category)) {
            totalExpenses += amount;
            categoryPercentages[category] += amount;
        }
        expenseFile.close();

        std::cout << "Category Percentages All Time:" << std::endl;
        for (const auto& pair : categoryPercentages) {
            double percentage = (pair.second / totalExpenses) * 100;
            std::cout << pair.first << ": " << std::fixed << std::setprecision(2) << percentage << "%" << std::endl;
        }
    }

private:
    std::map<std::string, double> categoryExpenses;
};

int main() {
    AccountManager accountManager;
    ExpenseAnalyzer expenseAnalyzer;

    int choice;
    double amount;
    std::string category;

    do {
        std::cout << "1. Record expense" << std::endl;
        std::cout << "2. Record income" << std::endl;
        std::cout << "3. Calculate balance" << std::endl;
        std::cout << "4. Calculate category percentages (last month)" << std::endl;
        std::cout << "5. Calculate category percentages (all time)" << std::endl;
        std::cout << "0. Exit" << std::endl;
        std::cout << "Enter your choice: ";
        std::cin >> choice;

        switch (choice) {
            case 1:
                std::cout << "Enter expense amount: ";
                std::cin >> amount;
                std::cout << "Enter expense category: ";
                std::cin >> category;
                accountManager.recordExpense(amount, category);
                break;
            case 2:
                std::cout << "Enter income amount: ";
                std::cin >> amount;
                accountManager.recordIncome(amount);
                break;
            case 3:
                expenseAnalyzer.calculateBalance();
                break;
            case 4:
                expenseAnalyzer.calculateCategoryPercentagesLastMonth();
                break;
            case 5:
                expenseAnalyzer.calculateCategoryPercentagesAllTime();
                break;
            case 0:
                std::cout << "Exiting the program. Goodbye!" << std::endl;
                break;
            default:
                std::cout << "Invalid choice. Please try again." << std::endl;
                break;
        }

        std::cout << std::endl;

    } while (choice != 0);

    return 0;
}
